{"version":3,"sources":["..\\scss\\main.scss","main.css","..\\..\\stylesheets\\modularscale\\_respond.scss"],"names":[],"mappings":"AAwBA;EACE,gBAAA;EACA,cAAA;EACA,mBAAA;EACA,eAAA;EACA,cAAA;ACvBF;;AD0BA;EEDU,oBAAA;EFGR,cAAA;ACvBF;AC6BU;EFRV;IEWY,0DAAA;ED5BV;AACF;ACqCI;EFrBJ;IEsBM,qBAAA;EDlCJ;AACF;;ADeA;EELU,mBAAA;EFOR,cAAA;ACZF;ACcU;EFJV;IEOY,wDAAA;EDbV;AACF;ACsBI;EFjBJ;IEkBM,mBAAA;EDnBJ;AACF;;ADIA;EETU,kBAAA;EFWR,cAAA;ACDF;ACDU;EFAV;IEGY,sDAAA;EDEV;AACF;ACOI;EFbJ;IEcM,kBAAA;EDJJ;AACF;;ADPA;EEbU,iBAAA;EFeR,cAAA;ACUF;AChBU;EFIV;IEDY,oDAAA;EDiBV;AACF;ACRI;EFTJ;IEUM,iBAAA;EDWJ;AACF;;ADlBA;EEjBU,gBAAA;EFmBR,cAAA;ACqBF;AC/BU;EFQV;IELY,kDAAA;EDgCV;AACF;ACvBI;EFLJ;IEMM,gBAAA;ED0BJ;AACF;;AD7BA;EErBU,cAAA;EFuBR,cAAA;ACgCF;AC9CU;EFYV;IETY,8CAAA;ED+CV;AACF;ACtCI;EFDJ;IEEM,cAAA;EDyCJ;AACF","file":"main.css","sourcesContent":["@import \"../../stylesheets/modularscale\";\r\n\r\n$modularscale: (\r\n  base: 16px,\r\n  ratio: 1.5\r\n);\r\n\r\n@debug ms(-1);\r\n@debug ms();\r\n@debug ms(0);\r\n@debug ms(1);\r\n@debug ms(2);\r\n\r\n$modularscale: (\r\n  base: 1em,\r\n  ratio: 1.3,\r\n  20em: (\r\n    ratio: 1.3\r\n  ),\r\n  60em: (\r\n    ratio: 1.6\r\n  ),\r\n);\r\n\r\nbody {\r\n  line-height: 1.3;\r\n  margin: 0 auto;\r\n  padding: 10% 5% 50%;\r\n  max-width: 42em;\r\n  font-size: ms(0);\r\n}\r\n\r\nh1 {\r\n  @include ms-respond(font-size, 5);\r\n  line-height: 1;\r\n}\r\nh2 {\r\n  @include ms-respond(font-size, 4);\r\n  line-height: 1;\r\n}\r\nh3 {\r\n  @include ms-respond(font-size, 3);\r\n  line-height: 1;\r\n}\r\nh4 {\r\n  @include ms-respond(font-size, 2);\r\n  line-height: 1;\r\n}\r\nh5 {\r\n  @include ms-respond(font-size, 1);\r\n  line-height: 1;\r\n}\r\nh6 {\r\n  @include ms-respond(font-size, 0);\r\n  line-height: 1;\r\n}\r\n","body {\n  line-height: 1.3;\n  margin: 0 auto;\n  padding: 10% 5% 50%;\n  max-width: 42em;\n  font-size: 1em;\n}\n\nh1 {\n  font-size: 3.71293em;\n  line-height: 1;\n}\n@media (min-width: 20em) and (max-width: 60em) {\n  h1 {\n    font-size: calc(3.71293em + 6.77283 * (100vw - 20em) / 40);\n  }\n}\n@media (min-width: 60em) {\n  h1 {\n    font-size: 10.48576em;\n  }\n}\n\nh2 {\n  font-size: 2.8561em;\n  line-height: 1;\n}\n@media (min-width: 20em) and (max-width: 60em) {\n  h2 {\n    font-size: calc(2.8561em + 3.6975 * (100vw - 20em) / 40);\n  }\n}\n@media (min-width: 60em) {\n  h2 {\n    font-size: 6.5536em;\n  }\n}\n\nh3 {\n  font-size: 2.197em;\n  line-height: 1;\n}\n@media (min-width: 20em) and (max-width: 60em) {\n  h3 {\n    font-size: calc(2.197em + 1.899 * (100vw - 20em) / 40);\n  }\n}\n@media (min-width: 60em) {\n  h3 {\n    font-size: 4.096em;\n  }\n}\n\nh4 {\n  font-size: 1.69em;\n  line-height: 1;\n}\n@media (min-width: 20em) and (max-width: 60em) {\n  h4 {\n    font-size: calc(1.69em + 0.87 * (100vw - 20em) / 40);\n  }\n}\n@media (min-width: 60em) {\n  h4 {\n    font-size: 2.56em;\n  }\n}\n\nh5 {\n  font-size: 1.3em;\n  line-height: 1;\n}\n@media (min-width: 20em) and (max-width: 60em) {\n  h5 {\n    font-size: calc(1.3em + 0.3 * (100vw - 20em) / 40);\n  }\n}\n@media (min-width: 60em) {\n  h5 {\n    font-size: 1.6em;\n  }\n}\n\nh6 {\n  font-size: 1em;\n  line-height: 1;\n}\n@media (min-width: 20em) and (max-width: 60em) {\n  h6 {\n    font-size: calc(1em + 0 * (100vw - 20em) / 40);\n  }\n}\n@media (min-width: 60em) {\n  h6 {\n    font-size: 1em;\n  }\n}","// Generate calc() function\r\n// based on Mike Riethmuller's Precise control over responsive typography\r\n// http://madebymike.com.au/writing/precise-control-responsive-typography/\r\n@function ms-fluid($val1: 1em, $val2: 1em, $break1: 0, $break2: 0) {\r\n  $diff: ms-unitless($val2) - ms-unitless($val1);\r\n\r\n  // v1 + (v2 - v1) * ( (100vw - b1) / b2 - b1 )\r\n  @return calc( #{$val1} + #{ms-unitless($val2) - ms-unitless($val1)} * ( ( 100vw - #{$break1}) / #{ms-unitless($break2) - ms-unitless($break1)} ) );\r\n}\r\n\r\n// Main responsive mixin\r\n@mixin ms-respond($prop, $val, $map: $modularscale, $ms-important: false) {\r\n  $base: $ms-base;\r\n  $ratio: $ms-ratio;\r\n\r\n  $first-write: true;\r\n  $last-break: null;\r\n\r\n  $important: '';\r\n\r\n  @if $ms-important == true {\r\n    $important: ' !important';\r\n  }\r\n\r\n  // loop through all settings with a breakpoint type value\r\n  @each $v, $s in $map {\r\n    @if type-of($v) == number {\r\n      @if unit($v) != '' {\r\n\r\n        // Write out the first value without a media query.\r\n        @if $first-write {\r\n          #{$prop}: unquote(\"#{ms-function($val, $thread: $v, $settings: $map)}#{$important}\");\r\n\r\n          // Not the first write anymore, reset to false to move on.\r\n          $first-write: false;\r\n          $last-break: $v;\r\n        }\r\n\r\n        // Write intermediate breakpoints.\r\n        @else {\r\n          @media (min-width: $last-break) and (max-width: $v) {\r\n            $val1: ms-function($val, $thread: $last-break, $settings: $map);\r\n            $val2: ms-function($val, $thread: $v, $settings: $map);\r\n            #{$prop}: unquote(\"#{ms-fluid($val1,$val2,$last-break,$v)}#{$important}\");\r\n          }\r\n          $last-break: $v;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Write the last breakpoint.\r\n  @if $last-break {\r\n    @media (min-width: $last-break) {\r\n      #{$prop}: unquote(\"#{ms-function($val, $thread: $last-break, $settings: $map)}#{$important}\");\r\n    }\r\n  }\r\n}"]}